@using ERP.Application.StudentApp.Students.Interfaces
@using ERP.Domain.Core.Entity
@using Microsoft.AspNetCore.Components.Web

@inject ISnackbar Snackbar
@inject IViewStudentsByNameUseCase ViewStudentsByNameUseCase
@inject IDialogService DialogService
<MudDialogProvider />
<MudDialog Class="my-custom-dialog">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            Edit Student
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Value="@student.StudentId" Label="Student ID" ReadOnly="true" />
        <MudTextField Value="@student.FirstName" Label="First Name" />
        <MudTextField Value="@student.LastName" Label="Last Name" />
        <MudTextField Value="@student.Address1" Label="Address" />
        <MudTextField Value="@student.Email" Label="Email" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="SaveStudent">Save</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .my-custom-dialog {
        max-width: 400px;
        margin: auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }







    [Parameter] public ERP.Domain.Core.Entity.Student student { get; set; } = new();







    private List<Student> _students = new List<Student>();







    // Your existing code...







    protected override async Task OnInitializedAsync()



    {



        _students = (await ViewStudentsByNameUseCase.ExecuteAsync("")).ToList();



    }











    private void Cancel()



    {



        MudDialog.Cancel();



    }







    private void SaveStudent()



    {



        // Save the changes to the database or perform any other necessary actions



        // For example, you might want to call a method like UpdateStudentInDataSource



        UpdateStudentInDataSource(student);







        MudDialog.Close(DialogResult.Ok(student.StudentId));



    }







    // Assuming you have a method to update the student in your data source



    private void UpdateStudentInDataSource(ERP.Domain.Core.Entity.Student updatedStudent)



    {



        // Implement the logic to update the student in your data source



        // For example, if _students is a list, find the corresponding student and update its properties



        var existingStudent = _students.FirstOrDefault(s => s.StudentId == updatedStudent.StudentId);



        if (existingStudent != null)



        {



            existingStudent.FirstName = updatedStudent.FirstName;



            existingStudent.LastName = updatedStudent.LastName;



            // Update other properties as needed



        }



    }
}
