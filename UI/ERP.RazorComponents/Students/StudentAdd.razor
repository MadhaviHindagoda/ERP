@using ERP.Domain.Core.Entity
@using FluentValidation
@using ERP.Application.StudentApp.Students.Interfaces
@using MudBlazor


@inject NavigationManager NavigationManager
@inject IAddStudentUseCase AddStudentUseCase;
@inject ISnackbar Snackbar;

<MudCard Class="my-custom-card">
    <MudForm Model="@model" @ref="@form" Validation="@(studentValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.FirstName" For="@(() => model.FirstName)" Immediate="true"
                Label="FirstName" />

            <MudTextField @bind-Value="model.LastName" For="@(() => model.LastName)" Immediate="true"
                Label="LastName" />
            <MudTextField @bind-Value="model.RegistrationNum" For="@(() => model.RegistrationNum)" Immediate="true"
                Label="Registration Number" />

            <MudTextField @bind-Value="model.Email" For="@(() => model.Email)" Immediate="true" Label="Email" />
            
            <MudTextField @bind-Value="model.Address1" For="@(() => model.Address1)" Immediate="true" Label="Address" />
            <MudTextField @bind-Value="model.Address2" For="@(() => model.Address2)" Immediate="true" Label="Address" />
            <MudTextField @bind-Value="model.City" For="@(() => model.City)" Immediate="true" Label="city" />
            <MudTextField @bind-Value="model.District" For="@(() => model.District)" Immediate="true"
                Label="District" />

            <MudTextField @bind-Value="model.NationalID" For="@(() => model.NationalID)" Immediate="true"
                Label="NationalID" />
            <MudTextField @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" Immediate="true"
                Label="MobileNumber" />
            <MudTextField @bind-Value="model.Phone" For="@(() => model.Phone)" Immediate="true" Label="PhoneNumber(Home)" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="@(async () => await Submit())">Add</MudButton>
    </MudCardActions>
    <MudButton Color="Color.Primary" OnClick="@NavigateToStudentEditPage">Back</MudButton>
</MudCard>
<div style="margin-top: 20px;">

</div>
<style>
    .my-custom-card {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ced4da; /* Gray border */
    }
</style>






@code {



    private void NavigateToStudentEditPage()

    {

        NavigationManager.NavigateTo("/studenteditlist");


    }


    [Parameter]


    public EventCallback onAdded { get; set; }


    private Student model = new Student();

    StudentModelValidator studentValidator = new StudentModelValidator();


    MudForm form;


    public class StudentModelValidator : AbstractValidator<Student>

    {



        public StudentModelValidator()



        {

            RuleFor(x => x.FirstName)


            .NotEmpty()


            .Length(1, 100);


            RuleFor(x => x.LastName)

            .NotEmpty()

            .Length(1, 100);


            RuleFor(x => x.Email)


            .Cascade(CascadeMode.Stop)


            .NotEmpty()


            .EmailAddress()


            .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));


            RuleFor(x => x.Address1)


            .NotEmpty()


            .Length(1, 100);


        }


        private async Task<bool> IsUniqueAsync(string email)




        {



            // Simulates a long running http call


            await Task.Delay(2000);

            return email.ToLower() != "test@test.com";


        }


        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>


        {

            var result = await ValidateAsync(ValidationContext<Student>

    .CreateWithOptions((Student)model, x => x.IncludeProperties(propertyName)));

            if (result.IsValid)


                return Array.Empty<string>();


            return result.Errors.Select(e => e.ErrorMessage);



        };


    }


    private async Task Submit()

    {


        await form.Validate();

        if (form.IsValid)

        {

            await AddStudentUseCase.ExecuteAsync(model);

            await onAdded.InvokeAsync();


            Snackbar.Add("New student added successfully", MudBlazor.Severity.Success);


        }

    }
}
